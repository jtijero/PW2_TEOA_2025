Parte 3

destino/Scripts/actívate

Las variables del “contexto” en un template
 modificación de inicio/views.py y templates/home.html
python manage.py runserver 127.0.0.1:8147

El tag: FOR
 modificación de función myHomeView en inicio/views.py y templates/home.html 

El contador de ciclos
 inclusión de  un forloop.counter en <li> dentro del for in myList

El DTL también posee condicionales
 agregación de condicionales en for de home.html
 con operador '|' usamos upper
 agregamos tambien add:10000 y un contador de longitud 

Los objetos del modelo contienen los campos que definimos y algunos otros más heredados del framework
>>> from personas.models import Persona
>>> Persona.objects.all()
<QuerySet [<Persona: Persona object (1)>, <Persona: Persona object (2)>, <Persona: Persona object (3)>, <Persona: Persona object (4)>]>
>>> obj = Persona.objects.get(id = 2)
>>> dir(obj)  

Modificaciones en personas
 Vista y template para personas agregación de template/personas/test.html /personas/views.py y modificación de listaContactos/urls.py
Encontrar una URL que coincida con la solicitud
Enviando el objeto entero en el contexto
 En lugar de crear un diccionario en la vista con los detalles del objeto, también se puede enviar el objeto entero

creación de carpeta templates en app personas y copiando test.html de templates/personas/test.html y cambiándole de nombre a descripción.html

Formularios en Django, en app personas
creación de personas/forms.py y modificación de views.py
tuvimos que cambiar en settings.py de listaContactos 'DIRS': [os.path.join(BASE_DIR,'personas'),], y ya no templates
creación de personas/templates/personas/personasCreate.html ERROR
En realidad personas/templates/agregar/personasCreate.html [para ello tambien se modifico tambien en views.py la función personaCreateView()]

en personas/templates/personas/  va descripcion.html

Templates con forms planos: GET
creamos personas/search.html, una nueva vista (otra funcion) y asociar una url en listaContactos

Datos de GET y POST
modificación de personasCreate.html y views.py en personas

Templates con forms planos POST
modificación de personasCreate.html, usamos crf_token

Acciones distintas para GET y POST: modificación a función personaCreateView


Parte 4

Objetos Form “planos” en Django
modificaciones en views.py forms.py de personas y se registra en urls.py de listaContactos

Parece que el formulario funciona, pero NO
La base de datos ¡no se modificó!
python manage.py shell
>>> from personas.models import Persona
>>> Persona.objects.all()

Enviando los datos al formulario
modificación de función personasAnotherCreateView haciendo ue los campos sean obligatorios

Diferenciando llamada POST y GET: Seguridad
modificación de función personasAnotherCreateView haciendo que los campos sean sugeridos

Recibiendo data limpia en una vista
Finalmente grabamos los datos
Los dos ** delante de un diccionario significan: "tratar los pares clave-valor en el diccionario como argumentos nombrados adicionales para esta llamada de función".

python manage.py shell [(destino) C:\Users\TIJERO\Desktop\PW2_TEOA_2025\PW2_PRAC6_Django3\src\listaContactos [main ≡]> python manage.py shell]
>>> from personas.models import Persona
>>> Persona.objects.all()
<QuerySet [<Persona: Persona object (1)>, <Persona: Persona object (2)>, <Persona: Persona object (3)>, <Persona: Persona object (4)>, <Persona: Persona object (5)>, <Persona: Persona object (6)>, <Persona: Persona object (7)>]>
>>> obj = Persona.objects.get(id = 7)
>>> obj.nombres
'New2'
>>>

Campos en el formulario
En un formulario, cada campo tiene una lógica de validación personalizada, junto con algunos otros hooks.
Las opciones llamadas “core” están presentes en todos los tipos de campos.
modificación de forms.py de personas en listaContactos	

Widgets
Un widget es la representación de Django de un elemento de input HTML. El widget maneja la representación del HTML y la extracción de datos de un diccionario GET / POST que corresponde al widget.
modificación de la clase RawPersonaForm

Validación extra de campos: clean_<fieldname>()
modificación de class PersonaForm: cada campo de una clase de Form es responsable no solo de validar los datos, sino tambien de limpiarlos; En la funcion vista personaCreateView(), asegúramos de que el formulario se esté creando y procesando correctamente.

Datos de iniciales de una instancia
En algún caso se podría desear que el formulario contenga datos que ya están en nuestro modelo (por ejemplo en un blog). La opción instance, permite llenar el formulario con datos iniciales desde un objeto del modelo.

Valores iniciales para un campo del formulario
se pueden proporcionar con el parámetro initial= estos anularán tanto los valores iniciales del campo de formulario como los valores de una instancia de modelo adjunta
modificación de vi	sta personaCreateView()

Ruteo Dinámico de URL
Se desea navegar sobre los elementos almacenados en nuestro modelo.
modificación de : listaContactos/urls.py, templates/personas/descripcion.html, y creación de vista personasShowObject en personas/views.py 

Error 404: get_object_or_404
Al navegar en los urls dinámicos podemos llegar a un objeto que no existe
Modificacion de personas/views.py  + get_object_or_404

Listando todos los objetos
creacion de nueva vista llamada personasListView y personas/personasLista.html y agregamos el path: path('personas/', personasListView, name = 'listing'), en urls.py en listaContactos

Borrando Objetos
creacion de vita personasDeleteView y personasBorrar.html, agregacion del path en listaContactos/urls.py

Redireccionando
uso de redirect('../')

Enlaces Dinámicos de URL
Defina un metodo get_absolute_url() para decirle a Django como calcular la URL canónica del objeto
Modificacion de clase Persona en personas/models.py y personasList.html

Invirtiendo los URLs: absolute_url
Una necesidad comun cuando se trabaja en un proyecto de Django es la posibilidad de obtener URL en sus formas finales, ya sea para incrustar en el contenido generado (URL de vistas y activos, URL mostradas al usuario, etc.) o para manejar el flujo de navegación en el lado del servidor (redirecciones, etc.)
Modificacion de la funcion get_absolute_url en la clase Persona en personas/models.py()

Espacio de nombres
Se crea un archivo para que la misma app maneje sus URLs
modificacion de listaContactos/urls.py y modificacion de la funcion get_absolute_url; creacion de personas/urls.py